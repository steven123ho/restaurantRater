package com.example.restuarantrater;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.text.format.DateFormat;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    private restaurant currentRestaurant = new restaurant();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initTextChangedEvents();
        initSaveButton();
        initChangeScreen();

        restaurantDataSource ds = new restaurantDataSource(this);
        ArrayList<dish> dishes;

        try {
            ds.open();
            dishes = ds.getDishes();
            ds.close();
            RecyclerView dishList;
            DishAdapter dishAdapter = new DishAdapter(dishes, MainActivity.this);

            dishList = findViewById(R.id.rvDishes);
            RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
            dishList.setLayoutManager(layoutManager);
            dishList.setAdapter(dishAdapter);


            // Added the ItemClickListener here for the class contact to have been initialized
            //Book said to add it before the onCreate method
            View.OnClickListener onItemClickListener = new View.OnClickListener() {
                @Override
                public void onClick (View view) {
                    RecyclerView.ViewHolder viewHolder = (RecyclerView.ViewHolder) view.getTag();
                    int position = viewHolder.getAdapterPosition();
                    int dishId = dishes.get(position).getDishID();
                    Intent intent = new Intent(MainActivity.this, RateDish.class);
                    intent.putExtra("dishID", dishId);
                    startActivity(intent);
                }
            };
            dishAdapter.setmOnClickListener(onItemClickListener);

            //Switch turns delete buttons on and off
            //Book did not say to put here but the contactAdapter is here
            Switch s = findViewById(R.id.switchDelete);
            s.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
                    Boolean status = compoundButton.isChecked();
                    dishAdapter.setDelete(status);
                    dishAdapter.notifyDataSetChanged();
                }
            });
        } catch (Exception e){
            Toast.makeText(this, "Error retrieving contacts", Toast.LENGTH_LONG).show();
        }
    }

    private void initSaveButton () {

        Button saveButton = findViewById(R.id.saveBtn);
        TextView results = findViewById(R.id.resultsLabel);
        saveButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                boolean wasSuccessful;
                hideKeyboard();
                restaurantDataSource ds = new restaurantDataSource(MainActivity.this);
                try {
                    ds.open();
                    if(currentRestaurant.getRestaurantID() == -1) {
                        wasSuccessful = ds.insertRestaurant(currentRestaurant);
                        if (wasSuccessful) {
                            int newId = ds.getLastID();
                            currentRestaurant.setRestaurantID(newId);
                        }
                    } else {
                        wasSuccessful = ds.updateRestaurant(currentRestaurant);
                    }
                    ds.close();
                } catch (Exception e) {
                    wasSuccessful = false;
                }
            }
        });
    }


    private void initTextChangedEvents() {

        final EditText etName = findViewById(R.id.nameInput);
        etName.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
                currentRestaurant.setName(etName.getText().toString());
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }
        });

        final EditText etStreetAddress = findViewById(R.id.streetInput);
        etStreetAddress.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
                currentRestaurant.setStreet(etStreetAddress.getText().toString());
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }
        });

        final EditText etCity = findViewById(R.id.cityInput);
        etCity.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
                currentRestaurant.setCity(etCity.getText().toString());
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }
        });

        final EditText etState = findViewById(R.id.stateInput);
        etState.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
                currentRestaurant.setState(etState.getText().toString());
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }
        });

        final EditText etZipCode = findViewById(R.id.zipInput);
        etZipCode.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
                currentRestaurant.setZipCode(etZipCode.getText().toString());
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }
        });
    }


    private void initChangeScreen() {
        Button addMealBtn = findViewById(R.id.addMealBtn);
        addMealBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, RateDish.class);
                intent.putExtra("currentRestaurant",currentRestaurant.getRestaurantID());
                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); //clears the stack trace
                startActivity(intent);

            }
        });
    }

    private void hideKeyboard () {
        InputMethodManager imm = (InputMethodManager) getSystemService(MainActivity.this.INPUT_METHOD_SERVICE);

        EditText nameInput = findViewById(R.id.nameInput);
        imm.hideSoftInputFromWindow(nameInput.getWindowToken(), 0);

        EditText addressInput = findViewById(R.id.streetInput);
        imm.hideSoftInputFromWindow(addressInput.getWindowToken(), 0);

        EditText stateInput = findViewById(R.id.stateInput);
        imm.hideSoftInputFromWindow(stateInput.getWindowToken(), 0);

        EditText cityInput = findViewById(R.id.cityInput);
        imm.hideSoftInputFromWindow(cityInput.getWindowToken(), 0);

        EditText zipCodeInput = findViewById(R.id.zipInput);
        imm.hideSoftInputFromWindow(zipCodeInput.getWindowToken(), 0);
    }

}